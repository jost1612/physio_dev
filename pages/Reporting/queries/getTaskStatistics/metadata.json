{
  "gitSyncId": "685e483118280a5cf36d2a8a_fce36fee-8ca1-4dc7-bb3e-e767f629b2e4",
  "id": "Reporting_getTaskStatistics",
  "pluginId": "postgres-plugin",
  "pluginType": "DB",
  "unpublishedAction": {
    "actionConfiguration": {
      "body": "WITH\n-- Zeitraster definieren (15-Minuten-Slots von 8:00 bis 18:00)\ntime_grid AS (\n  SELECT\n    d.day_abbrev,\n    e.id as employee_id,\n    r.id as room_id,\n    t.slot_time::time as slot_time,\n    (t.slot_time + INTERVAL '15 minutes')::time as slot_end,\n    e.name as employee_name,\n    r.name as room_name\n  FROM (VALUES ('Mo'), ('Di'), ('Mi'), ('Do'), ('Fr')) d(day_abbrev)\n  CROSS JOIN employees e\n  CROSS JOIN rooms r\n  CROSS JOIN (\n    SELECT generate_series(\n      TIMESTAMP '2024-01-01 07:00:00',\n      TIMESTAMP '2024-01-01 18:00:00',\n      '15 minutes'::interval\n    ) as slot_time\n  ) t\n),\n\n-- Alle gebuchten Slots\nbooked_slots AS (\n  SELECT\n    s.day_abbrev,\n    s.employee_id,\n    s.room_id,\n    s.start_time,\n    s.end_time,\n    t.name as task_name,\n    t.color as task_color,\n    e.name as employee_name,\n    r.name as room_name\n  FROM schedule s\n  LEFT JOIN tasks t ON s.task_id = t.id\n  LEFT JOIN employees e ON s.employee_id = e.id\n  LEFT JOIN rooms r ON s.room_id = r.id\n  WHERE t.name IS NOT NULL\n    AND s.task_id <> 7\n\t\tAND s.version_id = {{SelectVersion.selectedOptionValue}}\n),\n\n-- Alle Slots mit Buchungsstatus\nall_slots AS (\n  SELECT\n    tg.day_abbrev,\n    tg.employee_id,\n    tg.room_id,\n    tg.slot_time,\n    tg.slot_end,\n    tg.employee_name,\n    tg.room_name,\n    bs.task_name,\n    bs.task_color,\n    CASE\n      WHEN bs.task_name IS NOT NULL THEN 'GEBUCHT'\n      ELSE 'FREI'\n    END as slot_status\n  FROM time_grid tg\n  LEFT JOIN booked_slots bs ON (\n    tg.day_abbrev = bs.day_abbrev AND\n    tg.employee_id = bs.employee_id AND\n    tg.room_id = bs.room_id AND\n    tg.slot_time >= bs.start_time AND\n    tg.slot_time < bs.end_time\n  )\n),\n\n-- Task-Buchungen mit Details (Erweitert um productivity)\ntask_bookings AS (\n  SELECT\n    s.task_id,\n    s.employee_id,\n    s.room_id,\n    s.day_abbrev,\n    s.start_time,\n    s.end_time,\n    t.name as task_name,\n    t.color as task_color,\n    t.productivity, -- Neue Spalte hinzugefügt (Hier von 't' = tasks)\n    e.name as employee_name,\n    r.name as room_name,\n    EXTRACT(EPOCH FROM (s.end_time - s.start_time)) / 60 as duration_minutes,\n    ROUND(EXTRACT(EPOCH FROM (s.end_time - s.start_time)) / 3600.0, 2) as duration_hours\n  FROM schedule s\n  LEFT JOIN tasks t ON s.task_id = t.id\n  LEFT JOIN employees e ON s.employee_id = e.id\n  LEFT JOIN rooms r ON s.room_id = r.id\n  WHERE t.name IS NOT NULL\n  AND s.task_id <> 7\n\tAND s.version_id = {{SelectVersion.selectedOptionValue}}\n),\n\n-- Original Task-Statistiken (Gruppiert nach productivity)\ntask_stats AS (\n  SELECT\n    task_name,\n    task_color,\n    task_id,\n    tb1.productivity, -- Korrigiert: Eindeutige Referenzierung von tb1 (aus task_bookings)\n    COUNT(*) as total_bookings,\n    COUNT(DISTINCT employee_id) as unique_employees,\n    COUNT(DISTINCT room_id) as unique_rooms,\n    COUNT(DISTINCT day_abbrev) as days_used,\n    SUM(duration_hours) as total_hours,\n    AVG(duration_hours) as avg_duration_hours,\n    MIN(duration_hours) as min_duration_hours,\n    MAX(duration_hours) as max_duration_hours,\n    COUNT(CASE WHEN day_abbrev = 'Mo' THEN 1 END) as montag_count,\n    COUNT(CASE WHEN day_abbrev = 'Di' THEN 1 END) as dienstag_count,\n    COUNT(CASE WHEN day_abbrev = 'Mi' THEN 1 END) as mittwoch_count,\n    COUNT(CASE WHEN day_abbrev = 'Do' THEN 1 END) as donnerstag_count,\n    COUNT(CASE WHEN day_abbrev = 'Fr' THEN 1 END) as freitag_count,\n    (SELECT day_abbrev FROM task_bookings tb2\n     WHERE tb2.task_name = tb1.task_name AND tb2.productivity = tb1.productivity\n     GROUP BY day_abbrev ORDER BY COUNT(*) DESC LIMIT 1) as most_popular_day,\n    (SELECT employee_name FROM task_bookings tb3\n     WHERE tb3.task_name = tb1.task_name AND tb3.productivity = tb1.productivity AND tb3.employee_name IS NOT NULL\n     GROUP BY employee_name ORDER BY COUNT(*) DESC LIMIT 1) as most_frequent_employee,\n    (SELECT room_name FROM task_bookings tb4\n     WHERE tb4.task_name = tb1.task_name AND tb4.productivity = tb1.productivity AND tb4.room_name IS NOT NULL\n     GROUP BY room_name ORDER BY COUNT(*) DESC LIMIT 1) as most_frequent_room,\n    CASE\n      WHEN t.color IS NULL THEN '#2D3748'\n      WHEN LENGTH(t.color) != 7 OR SUBSTRING(t.color, 1, 1) != '#' THEN '#2D3748'\n      ELSE\n        CASE\n          -- Helligkeit der Hintergrundfarbe berechnen (Luminance-Formel)\n          WHEN (\n            (('x' || SUBSTRING(t.color, 2, 2))::bit(8)::INTEGER * 299) +\n            (('x' || SUBSTRING(t.color, 4, 2))::bit(8)::INTEGER * 587) +\n            (('x' || SUBSTRING(t.color, 6, 2))::bit(8)::INTEGER * 114)\n          ) / 1000 > 180 THEN '#1A202C'  -- Sehr dunkler Text für sehr helle Farben\n          WHEN (\n            (('x' || SUBSTRING(t.color, 2, 2))::bit(8)::INTEGER * 299) +\n            (('x' || SUBSTRING(t.color, 4, 2))::bit(8)::INTEGER * 587) +\n            (('x' || SUBSTRING(t.color, 6, 2))::bit(8)::INTEGER * 114)\n          ) / 1000 > 140 THEN '#2D3748'  -- Dunkler Text für helle Farben\n          -- Für mittlere Farben (wie Violett) → Weißer Text für besseren Kontrast\n          ELSE '#FFFFFF'  -- Weißer Text für dunkle und mittlere Farben\n        END\n    END as text_color\n  FROM task_bookings tb1\n    INNER JOIN tasks t\n        ON tb1.task_id=t.id\n  GROUP BY task_name, task_color, task_id, tb1.productivity, t.color -- Korrigiert: tb1.productivity in GROUP BY\n),\n\n-- Alle Statistiken kombinieren\ncombined_stats AS (\n  SELECT * FROM task_stats\n),\n\noverall_stats AS (\n  SELECT\n    SUM(total_bookings) as grand_total_bookings,\n    SUM(total_hours) as grand_total_hours\n  FROM combined_stats\n)\n\n-- HAUPTABFRAGE: Vollständige Auswertung inklusive Gap-Analyse\nSELECT\n  cs.task_name as \"Task_Name\",\n  cs.task_id as \"Task_Id\",\n  cs.task_color as \"Task_Farbe\",\n  cs.text_color as \"Text_Color\",\n  CASE\n    WHEN cs.productivity IS TRUE THEN 'Produktiv'\n    WHEN cs.productivity IS FALSE THEN 'Nicht Produktiv'\n    ELSE 'Unbekannt' -- Für den Fall, dass productivity NULL sein könnte\n  END as \"Produktivität_Kategorie\", -- Neue Spalte für die Gruppierung\n  -- HÄUFIGKEITS-DATEN\n  cs.total_bookings as \"Buchungen_Gesamt\",\n  ROUND((cs.total_bookings * 100.0 / os.grand_total_bookings), 2) as \"Anteil_Prozent\",\n\n  -- ZEIT-STATISTIKEN\n  ROUND(cs.total_hours, 2) as \"Stunden_Gesamt\",\n  ROUND(cs.avg_duration_hours, 2) as \"Durchschnitt_Stunden\",\n  ROUND(cs.min_duration_hours, 2) as \"Min_Stunden\",\n  ROUND(cs.max_duration_hours, 2) as \"Max_Stunden\",\n\n  -- RESSOURCEN-NUTZUNG\n  cs.unique_employees as \"Verschiedene_Mitarbeiter\",\n  cs.unique_rooms as \"Verschiedene_Raeume\",\n  cs.days_used as \"Genutzte_Wochentage\",\n\n  -- WOCHENTAG-VERTEILUNG\n  cs.montag_count as \"Mo\",\n  cs.dienstag_count as \"Di\",\n  cs.mittwoch_count as \"Mi\",\n  cs.donnerstag_count as \"Do\",\n  cs.freitag_count as \"Fr\",\n  cs.most_popular_day as \"Beliebtester_Tag\",\n\n  -- TOP-ZUWEISUNGEN\n  cs.most_frequent_employee as \"Hauptmitarbeiter\",\n  cs.most_frequent_room as \"Hauptraum\",\n\n  -- RANKING\n  RANK() OVER (ORDER BY cs.total_bookings DESC) as \"Rang_Haeufigkeit\",\n  RANK() OVER (ORDER BY cs.total_hours DESC) as \"Rang_Stunden\",\n\n  -- KATEGORIE\n  CASE\n    WHEN cs.task_name = 'PATIENTENZEIT_VERFÜGBAR' THEN 'Verfügbare Patientenzeit'\n    WHEN cs.task_name = 'EINZELNER_FREIER_SLOT' THEN 'Einzelne freie Slots'\n    WHEN cs.total_bookings >= 10 THEN 'Sehr häufig'\n    WHEN cs.total_bookings >= 5 THEN 'Häufig'\n    WHEN cs.total_bookings >= 2 THEN 'Gelegentlich'\n    ELSE 'Selten'\n  END as \"Kategorie\",\n\n  -- ZUSÄTZLICHE PATIENTENZEIT-INFO\n  CASE\n    WHEN cs.task_name = 'PATIENTENZEIT_VERFÜGBAR' THEN\n      ROUND(cs.total_hours / 0.5, 0) || ' mögliche Patiententermine'\n    WHEN cs.task_name = 'EINZELNER_FREIER_SLOT' THEN\n      cs.total_bookings || ' nicht nutzbare 15-Min-Slots'\n    ELSE NULL\n  END as \"Zusatz_Info\"\n\nFROM combined_stats cs\nCROSS JOIN overall_stats os\nORDER BY\n  CASE\n    WHEN cs.productivity IS TRUE THEN 1\n    WHEN cs.productivity IS FALSE THEN 2\n    ELSE 3 -- Unbekannte Produktivität zuletzt\n  END,\n  cs.total_bookings DESC,\n  cs.total_hours DESC;",
      "encodeParamsToggle": true,
      "paginationType": "NONE",
      "pluginSpecifiedTemplates": [
        {
          "value": true
        }
      ],
      "timeoutInMillisecond": 10000
    },
    "confirmBeforeExecute": false,
    "datasource": {
      "id": "PhysioPlanung_DEV",
      "isAutoGenerated": false,
      "name": "PhysioPlanung_DEV",
      "pluginId": "postgres-plugin"
    },
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "name": "getTaskStatistics",
    "pageId": "Reporting",
    "runBehaviour": "ON_PAGE_LOAD",
    "userSetOnLoad": false
  }
}