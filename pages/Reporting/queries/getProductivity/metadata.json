{
  "gitSyncId": "685e483118280a5cf36d2a8a_0d2037be-d044-4c8a-b033-700fba3e0013",
  "id": "Reporting_getProductivity",
  "pluginId": "postgres-plugin",
  "pluginType": "DB",
  "unpublishedAction": {
    "actionConfiguration": {
      "body": "WITH\n-- Zeitraster definieren (15-Minuten-Slots von 7:00 bis 18:00)\ntime_grid AS (\n  SELECT\n    d.day_abbrev,\n    e.id as employee_id,\n    e.name as employee_name,\n    t.slot_time::time as slot_time,\n    (t.slot_time + INTERVAL '15 minutes')::time as slot_end\n  FROM (VALUES ('Mo'), ('Di'), ('Mi'), ('Do'), ('Fr')) d(day_abbrev)\n  CROSS JOIN employees e\n  CROSS JOIN (\n    SELECT generate_series(\n      TIMESTAMP '2024-01-01 07:00:00',\n      TIMESTAMP '2024-01-01 17:45:00',\n      '15 minutes'::interval\n    ) as slot_time\n  ) t\n  WHERE e.id <> 53\n),\n\n-- Alle gebuchten Slots mit Produktivitätskennzeichnung\nbooked_slots AS (\n  SELECT\n    s.day_abbrev,\n    s.employee_id,\n    s.start_time,\n    s.end_time,\n    t.name as task_name,\n    COALESCE(t.productivity, false) as is_productive,\n    s.task_id -- Task ID beibehalten, um sie später zu verwenden\n  FROM schedule s\n  LEFT JOIN tasks t ON s.task_id = t.id\n  WHERE t.name IS NOT NULL\n    AND s.employee_id NOT IN (28, 33, 34, 32, 30)\n    AND s.version_id = {{SelectVersion.selectedOptionValue}}\n),\n\n-- Arbeitszeiten pro Mitarbeiter und Tag ermitteln\nworking_hours AS (\n  SELECT\n    bs.day_abbrev,\n    bs.employee_id,\n    MIN(bs.start_time) as first_appointment,\n    MAX(bs.end_time) as last_appointment\n  FROM booked_slots bs\n  GROUP BY bs.day_abbrev, bs.employee_id\n),\n\n-- Alle Slots mit Buchungsstatus und Produktivität (originale Logik beibehalten)\nall_slots AS (\n  SELECT\n    tg.day_abbrev,\n    tg.employee_id,\n    tg.employee_name,\n    tg.slot_time,\n    tg.slot_end,\n    CASE\n      WHEN bs.task_name IS NOT NULL AND bs.is_productive = TRUE THEN 'PRODUKTIV_GEBUCHT'\n      WHEN bs.task_name IS NOT NULL AND bs.is_productive = FALSE THEN 'UNPRODUKTIV_GEBUCHT'\n      ELSE 'FREI'\n    END as slot_status,\n    bs.task_id, -- Task ID weiterhin hier verfügbar machen\n    -- Slot-Nummer für Gruppierung\n    ROW_NUMBER() OVER (\n      PARTITION BY tg.day_abbrev, tg.employee_id\n      ORDER BY tg.slot_time\n    ) as slot_number\n  FROM time_grid tg\n  INNER JOIN working_hours wh ON (\n    tg.day_abbrev = wh.day_abbrev AND\n    tg.employee_id = wh.employee_id AND\n    tg.slot_time >= wh.first_appointment AND\n    tg.slot_time < wh.last_appointment\n  )\n  LEFT JOIN booked_slots bs ON (\n    tg.day_abbrev = bs.day_abbrev AND\n    tg.employee_id = bs.employee_id AND\n    tg.slot_time >= bs.start_time AND\n    tg.slot_time < bs.end_time\n  )\n),\n\n-- Gap-Analyse: Aufeinanderfolgende freie Slots identifizieren\ngap_analysis AS (\n  SELECT\n    als.day_abbrev,\n    als.employee_id,\n    als.employee_name,\n    als.slot_time,\n    als.slot_status,\n    als.slot_number,\n    -- Gruppierung aufeinanderfolgender freier Slots\n    CASE\n      WHEN als.slot_status = 'FREI' THEN\n        als.slot_number - ROW_NUMBER() OVER (\n          PARTITION BY als.day_abbrev, als.employee_id, als.slot_status\n          ORDER BY als.slot_time\n        )\n    END as gap_group\n  FROM all_slots als\n),\n\n-- Freie Slot-Gruppen zusammenfassen und korrekt aufteilen\nfree_slot_groups AS (\n  SELECT\n    ga.day_abbrev,\n    ga.employee_id,\n    ga.employee_name,\n    ga.gap_group,\n    COUNT(*) as consecutive_free_slots,\n    FLOOR(COUNT(*) / 2) as available_patient_slots_30min,\n    COUNT(*) % 2 as available_admin_slots_15min\n  FROM gap_analysis ga\n  WHERE ga.slot_status = 'FREI' AND ga.gap_group IS NOT NULL\n  GROUP BY ga.day_abbrev, ga.employee_id, ga.employee_name, ga.gap_group\n),\n\n-- Geplante Zeit-Statistiken\nplanned_time_stats AS (\n  SELECT\n    als.employee_id,\n    als.employee_name,\n    als.day_abbrev,\n    COUNT(CASE WHEN als.slot_status = 'PRODUKTIV_GEBUCHT' THEN 1 END) as planned_productive_slots_15min,\n    COUNT(CASE WHEN als.slot_status = 'UNPRODUKTIV_GEBUCHT' AND als.task_id <> 7 THEN 1 END) as planned_unproductive_slots_15min\n  FROM all_slots als\n  WHERE als.slot_status IN ('PRODUKTIV_GEBUCHT', 'UNPRODUKTIV_GEBUCHT')\n  GROUP BY als.employee_id, als.employee_name, als.day_abbrev\n),\n\n-- Verfügbare Zeit-Statistiken\navailable_time_stats AS (\n  SELECT\n    fsg.employee_id,\n    fsg.employee_name,\n    fsg.day_abbrev,\n    SUM(fsg.available_patient_slots_30min) as available_slots_30min,\n    SUM(fsg.available_admin_slots_15min) as available_slots_15min\n  FROM free_slot_groups fsg\n  GROUP BY fsg.employee_id, fsg.employee_name, fsg.day_abbrev\n),\n\n-- Kombinierte Statistiken pro Mitarbeiter und Tag\ndaily_stats AS (\n  SELECT\n    COALESCE(pts.employee_id, ats.employee_id) as employee_id,\n    COALESCE(pts.employee_name, ats.employee_name) as employee_name,\n    COALESCE(pts.day_abbrev, ats.day_abbrev) as day_abbrev,\n\n    -- Verfügbare Zeit\n    COALESCE(ats.available_slots_30min, 0) as slots_30min,\n    COALESCE(ats.available_slots_15min, 0) as slots_15min,\n\n    -- Geplante Zeit\n    COALESCE(pts.planned_productive_slots_15min, 0) as planned_productive_slots_15min,\n    COALESCE(pts.planned_unproductive_slots_15min, 0) as planned_unproductive_slots_15min\n\n  FROM planned_time_stats pts\n  FULL OUTER JOIN available_time_stats ats ON (\n    pts.employee_id = ats.employee_id AND\n    pts.day_abbrev = ats.day_abbrev\n  )\n),\n\n-- Mitarbeiter-Farben definieren\nemployee_colors AS (\n  SELECT\n    emp.employee_id,\n    emp.employee_name,\n    CASE ROW_NUMBER() OVER (ORDER BY emp.employee_name)\n      WHEN 1 THEN '#6366f1'   -- Indigo\n      WHEN 2 THEN '#8b5cf6'   -- Violett\n      WHEN 3 THEN '#06b6d4'   -- Cyan\n      WHEN 4 THEN '#10b981'   -- Emerald\n      WHEN 5 THEN '#f59e0b'   -- Amber\n      WHEN 6 THEN '#ef4444'   -- Rose\n      WHEN 7 THEN '#84cc16'   -- Lime\n      WHEN 8 THEN '#ec4899'   -- Pink\n      WHEN 9 THEN '#3b82f6'   -- Blue\n      WHEN 10 THEN '#a855f7'  -- Purple\n      WHEN 11 THEN '#0ea5e9'  -- Sky\n      WHEN 12 THEN '#22c55e'  -- Green\n      WHEN 13 THEN '#eab308'  -- Yellow\n      WHEN 14 THEN '#f97316'  -- Orange\n      WHEN 15 THEN '#14b8a6'  -- Teal\n      WHEN 16 THEN '#f43f5e'  -- Rose-Red\n      WHEN 17 THEN '#8b5a3c'  -- Brown\n      WHEN 18 THEN '#6b7280'  -- Gray\n      WHEN 19 THEN '#dc2626'  -- Red\n      WHEN 20 THEN '#7c3aed'  -- Violet\n      WHEN 21 THEN '#059669'  -- Emerald-Dark\n      WHEN 22 THEN '#d97706'  -- Amber-Dark\n      WHEN 23 THEN '#be123c'  -- Rose-Dark\n      WHEN 24 THEN '#4c1d95'  -- Indigo-Dark\n      WHEN 25 THEN '#065f46'  -- Green-Dark\n      WHEN 26 THEN '#92400e'  -- Orange-Dark\n      WHEN 27 THEN '#7e22ce'  -- Purple-Dark\n      WHEN 28 THEN '#0c4a6e'  -- Sky-Dark\n      WHEN 29 THEN '#991b1b'  -- Red-Dark\n      WHEN 30 THEN '#581c87'  -- Violet-Dark\n      WHEN 31 THEN '#155e75'  -- Cyan-Dark\n      WHEN 32 THEN '#166534'  -- Green-Dark\n      WHEN 33 THEN '#a16207'  -- Yellow-Dark\n      WHEN 34 THEN '#ea580c'  -- Orange-Bright\n      WHEN 35 THEN '#0d9488'  -- Teal-Dark\n      WHEN 36 THEN '#e11d48'  -- Rose-Bright\n      WHEN 37 THEN '#7c2d12'  -- Brown-Dark\n      WHEN 38 THEN '#374151'  -- Gray-Dark\n      WHEN 39 THEN '#1e40af'  -- Blue-Dark\n      WHEN 40 THEN '#9333ea'  -- Purple-Bright\n      ELSE '#' || LPAD(TO_HEX((ROW_NUMBER() OVER (ORDER BY emp.employee_name) * 123456) % 16777215), 6, '0')\n    END as bg_color,\n    '#ffffff' as text_color\n  FROM (SELECT DISTINCT ds.employee_id, ds.employee_name FROM daily_stats ds) emp\n),\n-- PIVOT-TABELLE: Kombinierte Auswertung\ncte_erg AS (\nSELECT\n  emp.employee_name as \"Mitarbeiter\",\n  ec.bg_color as \"Mitarbeiter_Color\",\n  ec.text_color as \"Mitarbeiter_TextColor\",\n\n  -- Montag: Verfügbar + Geplant\n  COALESCE(mo.slots_30min, 0) || ' / ' || COALESCE(mo.slots_15min, 0) ||\n  ' (G:' || COALESCE(mo.planned_productive_slots_15min, 0) || '/' || COALESCE(mo.planned_unproductive_slots_15min, 0) || ')' as \"Montag_30min/15min\",\n\n  -- Dienstag\n  COALESCE(di.slots_30min, 0) || ' / ' || COALESCE(di.slots_15min, 0) ||\n  ' (G:' || COALESCE(di.planned_productive_slots_15min, 0) || '/' || COALESCE(di.planned_unproductive_slots_15min, 0) || ')' as \"Dienstag_30min/15min\",\n\n  -- Mittwoch\n  COALESCE(mi.slots_30min, 0) || ' / ' || COALESCE(mi.slots_15min, 0) ||\n  ' (G:' || COALESCE(mi.planned_productive_slots_15min, 0) || '/' || COALESCE(mi.planned_unproductive_slots_15min, 0) || ')' as \"Mittwoch_30min/15min\",\n\n  -- Donnerstag\n  COALESCE(donnerstag.slots_30min, 0) || ' / ' || COALESCE(donnerstag.slots_15min, 0) ||\n  ' (G:' || COALESCE(donnerstag.planned_productive_slots_15min, 0) || '/' || COALESCE(donnerstag.planned_unproductive_slots_15min, 0) || ')' as \"Donnerstag_30min/15min\",\n\n  -- Freitag\n  COALESCE(fr.slots_30min, 0) || ' / ' || COALESCE(fr.slots_15min, 0) ||\n  ' (G:' || COALESCE(fr.planned_productive_slots_15min, 0) || '/' || COALESCE(fr.planned_unproductive_slots_15min, 0) || ')' as \"Freitag_30min/15min\",\n\n  -- VERFÜGBARE Wochensummen\n  COALESCE(mo.slots_30min, 0) + COALESCE(di.slots_30min, 0) + COALESCE(mi.slots_30min, 0) +\n  COALESCE(donnerstag.slots_30min, 0) + COALESCE(fr.slots_30min, 0) as \"Verfügbar_30min_Slots\",\n\n  COALESCE(mo.slots_15min, 0) + COALESCE(di.slots_15min, 0) + COALESCE(mi.slots_15min, 0) +\n  COALESCE(donnerstag.slots_15min, 0) + COALESCE(fr.slots_15min, 0) as \"Verfügbar_15min_Slots\",\n\n  -- GEPLANTE Wochensummen\n  COALESCE(mo.planned_productive_slots_15min, 0) + COALESCE(di.planned_productive_slots_15min, 0) +\n  COALESCE(mi.planned_productive_slots_15min, 0) + COALESCE(donnerstag.planned_productive_slots_15min, 0) +\n  COALESCE(fr.planned_productive_slots_15min, 0) as \"Geplant_Produktiv_15min\",\n\n  COALESCE(mo.planned_unproductive_slots_15min, 0) + COALESCE(di.planned_unproductive_slots_15min, 0) +\n  COALESCE(mi.planned_unproductive_slots_15min, 0) + COALESCE(donnerstag.planned_unproductive_slots_15min, 0) +\n  COALESCE(fr.planned_unproductive_slots_15min, 0) as \"Geplant_Unproduktiv_15min\",\n\n  -- GESAMTSUMMEN\n  -- Gesamte produktive Zeit (30min verfügbar * 2 + geplante produktive 15min Slots)\n  (COALESCE(mo.slots_30min, 0) + COALESCE(di.slots_30min, 0) + COALESCE(mi.slots_30min, 0) +\n   COALESCE(donnerstag.slots_30min, 0) + COALESCE(fr.slots_30min, 0)) * 2 +\n  (COALESCE(mo.planned_productive_slots_15min, 0) + COALESCE(di.planned_productive_slots_15min, 0) +\n   COALESCE(mi.planned_productive_slots_15min, 0) + COALESCE(donnerstag.planned_productive_slots_15min, 0) +\n   COALESCE(fr.planned_productive_slots_15min, 0)) as \"Gesamt_Produktiv_15min\",\n\n  -- Gesamte unproduktive Zeit (15min verfügbar + geplante unproduktive 15min Slots)\n  (COALESCE(mo.slots_15min, 0) + COALESCE(di.slots_15min, 0) + COALESCE(mi.slots_15min, 0) +\n   COALESCE(donnerstag.slots_15min, 0) + COALESCE(fr.slots_15min, 0)) +\n  (COALESCE(mo.planned_unproductive_slots_15min, 0) + COALESCE(di.planned_unproductive_slots_15min, 0) +\n   COALESCE(mi.planned_unproductive_slots_15min, 0) + COALESCE(donnerstag.planned_unproductive_slots_15min, 0) +\n   COALESCE(fr.planned_unproductive_slots_15min, 0)) as \"Gesamt_Unproduktiv_15min\",\n\n  -- Mögliche Patiententermine (nur verfügbare 30min Slots)\n  COALESCE(mo.slots_30min, 0) + COALESCE(di.slots_30min, 0) + COALESCE(mi.slots_30min, 0) +\n  COALESCE(donnerstag.slots_30min, 0) + COALESCE(fr.slots_30min, 0) as \"Mögliche_Patiententermine\",\n\n  -- Sortierungshilfe\n  0 as sort_order\n\nFROM (SELECT DISTINCT ds.employee_id, ds.employee_name FROM daily_stats ds) emp\nLEFT JOIN employee_colors ec ON emp.employee_id = ec.employee_id\n\n-- LEFT JOINs für jeden Wochentag\nLEFT JOIN daily_stats mo ON emp.employee_id = mo.employee_id AND mo.day_abbrev = 'Mo'\nLEFT JOIN daily_stats di ON emp.employee_id = di.employee_id AND di.day_abbrev = 'Di'\nLEFT JOIN daily_stats mi ON emp.employee_id = mi.employee_id AND mi.day_abbrev = 'Mi'\nLEFT JOIN daily_stats donnerstag ON emp.employee_id = donnerstag.employee_id AND donnerstag.day_abbrev = 'Do'\nLEFT JOIN daily_stats fr ON emp.employee_id = fr.employee_id AND fr.day_abbrev = 'Fr'\n\nUNION ALL\n\n-- SUMMENZEILE\nSELECT\n  '📊 GESAMT' as \"Mitarbeiter\",\n  '#4CAF50' as \"Mitarbeiter_Color\",\n  '#FFFFFF' as \"Mitarbeiter_TextColor\",\n\n  -- Montag Summen\n  SUM(COALESCE(mo.slots_30min, 0)) || ' / ' || SUM(COALESCE(mo.slots_15min, 0)) ||\n  ' (G:' || SUM(COALESCE(mo.planned_productive_slots_15min, 0)) || '/' || SUM(COALESCE(mo.planned_unproductive_slots_15min, 0)) || ')' as \"Montag_30min/15min\",\n\n  -- Dienstag Summen\n  SUM(COALESCE(di.slots_30min, 0)) || ' / ' || SUM(COALESCE(di.slots_15min, 0)) ||\n  ' (G:' || SUM(COALESCE(di.planned_productive_slots_15min, 0)) || '/' || SUM(COALESCE(di.planned_unproductive_slots_15min, 0)) || ')' as \"Dienstag_30min/15min\",\n\n  -- Mittwoch Summen\n  SUM(COALESCE(mi.slots_30min, 0)) || ' / ' || SUM(COALESCE(mi.slots_15min, 0)) ||\n  ' (G:' || SUM(COALESCE(mi.planned_productive_slots_15min, 0)) || '/' || SUM(COALESCE(mi.planned_unproductive_slots_15min, 0)) || ')' as \"Mittwoch_30min/15min\",\n\n  -- Donnerstag Summen\n  SUM(COALESCE(donnerstag.slots_30min, 0)) || ' / ' || SUM(COALESCE(donnerstag.slots_15min, 0)) ||\n  ' (G:' || SUM(COALESCE(donnerstag.planned_productive_slots_15min, 0)) || '/' || SUM(COALESCE(donnerstag.planned_unproductive_slots_15min, 0)) || ')' as \"Donnerstag_30min/15min\",\n\n  -- Freitag Summen\n  SUM(COALESCE(fr.slots_30min, 0)) || ' / ' || SUM(COALESCE(fr.slots_15min, 0)) ||\n  ' (G:' || SUM(COALESCE(fr.planned_productive_slots_15min, 0)) || '/' || SUM(COALESCE(fr.planned_unproductive_slots_15min, 0)) || ')' as \"Freitag_30min/15min\",\n\n  -- VERFÜGBARE Wochensummen\n  SUM(COALESCE(mo.slots_30min, 0) + COALESCE(di.slots_30min, 0) + COALESCE(mi.slots_30min, 0) +\n      COALESCE(donnerstag.slots_30min, 0) + COALESCE(fr.slots_30min, 0)) as \"Verfügbar_30min_Slots\",\n\n  SUM(COALESCE(mo.slots_15min, 0) + COALESCE(di.slots_15min, 0) + COALESCE(mi.slots_15min, 0) +\n      COALESCE(donnerstag.slots_15min, 0) + COALESCE(fr.slots_15min, 0)) as \"Verfügbar_15min_Slots\",\n\n  -- GEPLANTE Wochensummen\n  SUM(COALESCE(mo.planned_productive_slots_15min, 0) + COALESCE(di.planned_productive_slots_15min, 0) +\n      COALESCE(mi.planned_productive_slots_15min, 0) + COALESCE(donnerstag.planned_productive_slots_15min, 0) +\n      COALESCE(fr.planned_productive_slots_15min, 0)) as \"Geplant_Produktiv_15min\",\n\n  SUM(COALESCE(mo.planned_unproductive_slots_15min, 0) + COALESCE(di.planned_unproductive_slots_15min, 0) +\n      COALESCE(mi.planned_unproductive_slots_15min, 0) + COALESCE(donnerstag.planned_unproductive_slots_15min, 0) +\n      COALESCE(fr.planned_unproductive_slots_15min, 0)) as \"Geplant_Unproduktiv_15min\",\n\n  -- GESAMTSUMMEN\n  SUM((COALESCE(mo.slots_30min, 0) + COALESCE(di.slots_30min, 0) + COALESCE(mi.slots_30min, 0) +\n        COALESCE(donnerstag.slots_30min, 0) + COALESCE(fr.slots_30min, 0)) * 2 +\n       (COALESCE(mo.planned_productive_slots_15min, 0) + COALESCE(di.planned_productive_slots_15min, 0) +\n        COALESCE(mi.planned_productive_slots_15min, 0) + COALESCE(donnerstag.planned_productive_slots_15min, 0) +\n        COALESCE(fr.planned_productive_slots_15min, 0))) as \"Gesamt_Produktiv_15min\",\n\n  SUM((COALESCE(mo.slots_15min, 0) + COALESCE(di.slots_15min, 0) + COALESCE(mi.slots_15min, 0) +\n        COALESCE(donnerstag.slots_15min, 0) + COALESCE(fr.slots_15min, 0)) +\n       (COALESCE(mo.planned_unproductive_slots_15min, 0) + COALESCE(di.planned_unproductive_slots_15min, 0) +\n        COALESCE(mi.planned_unproductive_slots_15min, 0) + COALESCE(donnerstag.planned_unproductive_slots_15min, 0) +\n        COALESCE(fr.planned_unproductive_slots_15min, 0))) as \"Gesamt_Unproduktiv_15min\",\n\n  -- Verfügbare Patiententermine gesamt\n  SUM(COALESCE(mo.slots_30min, 0) + COALESCE(di.slots_30min, 0) + COALESCE(mi.slots_30min, 0) +\n      COALESCE(donnerstag.slots_30min, 0) + COALESCE(fr.slots_30min, 0)) as \"Mögliche_Patiententermine\",\n\n  -- Sortierungshilfe\n  1 as sort_order\n\nFROM (SELECT DISTINCT ds.employee_id, ds.employee_name FROM daily_stats ds) emp\nLEFT JOIN daily_stats mo ON emp.employee_id = mo.employee_id AND mo.day_abbrev = 'Mo'\nLEFT JOIN daily_stats di ON emp.employee_id = di.employee_id AND di.day_abbrev = 'Di'\nLEFT JOIN daily_stats mi ON emp.employee_id = mi.employee_id AND mi.day_abbrev = 'Mi'\nLEFT JOIN daily_stats donnerstag ON emp.employee_id = donnerstag.employee_id AND donnerstag.day_abbrev = 'Do'\nLEFT JOIN daily_stats fr ON emp.employee_id = fr.employee_id AND fr.day_abbrev = 'Fr'\n\nORDER BY sort_order DESC, \"Mitarbeiter\"\n)\nSELECT\n    e.*,\n    (e.\"Gesamt_Produktiv_15min\" + e.\"Gesamt_Unproduktiv_15min\") AS \"Gesamt_Slots_Insgesamt\",\n    CASE\n        WHEN (e.\"Gesamt_Produktiv_15min\" + e.\"Gesamt_Unproduktiv_15min\") > 0 THEN\n            ROUND(((e.\"Gesamt_Produktiv_15min\"::numeric * 100) / (e.\"Gesamt_Produktiv_15min\" + e.\"Gesamt_Unproduktiv_15min\"))::numeric, 2)\n        ELSE 0.00\n    END AS \"Anteil_Produktiv_Num\",\n    CASE\n        WHEN (e.\"Gesamt_Produktiv_15min\" + e.\"Gesamt_Unproduktiv_15min\") > 0 THEN\n            ROUND(((e.\"Gesamt_Unproduktiv_15min\"::numeric * 100) / (e.\"Gesamt_Produktiv_15min\" + e.\"Gesamt_Unproduktiv_15min\"))::numeric, 2)\n        ELSE 0.00\n    END AS \"Anteil_Unproduktiv_Num\",\n    CASE\n        WHEN (e.\"Gesamt_Produktiv_15min\" + e.\"Gesamt_Unproduktiv_15min\") > 0 THEN\n            (ROUND(((e.\"Gesamt_Produktiv_15min\"::numeric * 100) / (e.\"Gesamt_Produktiv_15min\" + e.\"Gesamt_Unproduktiv_15min\"))::numeric, 2))::text || '%'\n        ELSE '0.00%'\n    END AS \"Anteil_Produktiv_Prozent\",\n    CASE\n        WHEN (e.\"Gesamt_Produktiv_15min\" + e.\"Gesamt_Unproduktiv_15min\") > 0 THEN\n            (ROUND(((e.\"Gesamt_Unproduktiv_15min\"::numeric * 100) / (e.\"Gesamt_Produktiv_15min\" + e.\"Gesamt_Unproduktiv_15min\"))::numeric, 2))::text || '%'\n        ELSE '0.00%'\n    END AS \"Anteil_Unproduktiv_Prozent\"\nFROM cte_erg e;",
      "encodeParamsToggle": true,
      "paginationType": "NONE",
      "pluginSpecifiedTemplates": [
        {
          "value": false
        }
      ],
      "timeoutInMillisecond": 10000
    },
    "confirmBeforeExecute": false,
    "datasource": {
      "id": "PhysioPlanung_DEV",
      "isAutoGenerated": false,
      "name": "PhysioPlanung_DEV",
      "pluginId": "postgres-plugin"
    },
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "name": "getProductivity",
    "pageId": "Reporting",
    "runBehaviour": "ON_PAGE_LOAD",
    "userSetOnLoad": false
  }
}